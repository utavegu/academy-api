БЛИЖАЙШЕЕ:
- "Лекцию" пока сделал с инкрементальным ID, но в идеале нужно будет переделать на тройной уникальный ключ (начало, конец, день недели)
- лекции - на гет-запрос часть полей убрать (например, данной таблице от лектора нужны только ФИО, а от дисциплины - только её название). Смотри в сторону настроек декоратора JoinColumn, скорее всего там
- доведение до ума всех имеющихся модулей (пока без валидации, просто ДТО-хотя бы и красивая внутрянка - трай-кэтчи, проверки, выбрасывание ошибок (те, которые ОРМ сам не выбрасывает - тестируй и генерируй самостоятельно)) + хотя бы у одного сервиса должен быть

- собрать новые тудусы все сюда
- на этом этапе следует разгрести (выполнить, закрыть) все тудусы

- вычистить лишние контроллеры

- обкатать транзакции при создании/обновлении студента и педагога (если останется время, пока есть более приоритетные задачи). В идеале она всё равно нужна там, так как в данный момент есть дыра - даже если выкинется какая-то ошибка и студент/педагог не будут созданы, но проверка экзистности по паспорту/телефону/почте будет пройдена успешно - контакт или персональные данные всё равно создадутся, а студент - нет. Итого: неконсистентность данных и дальнейшие ошибки создания студента, даже если кейсы, вызванные ошибку уже были исправлены. И придётся идти вычищать созданные персональные данные или контакты. В общем не круто, надо транзакцией.


Пока что лучше делать перед каждым новым запуском:
docker volume rm academy-api_postgres_data academy-api_pgadmin_data

-------------------------

TODO-s:

- dbConnectionConfig - добавить нестовый конфиг с типизацией и геттерами.

- Свойство колоночного депоратора "unique" - и создавать не создаёт, и ошибку сам не выкидывает (вот если длину превышаю - выкидывает - value too long for type character varying(10)). Надо поотлавливать на уровне сервиса. И, скорее всего, придётся сначала делать запрос на наличие такой группы, затем самому выкидывать ошибку. UPD: прикрутил глобальный перехватчик ошибок, проверить подхватится ли теперь или придётся генерировать ошибку самому (но не делай этого пока не прикрутишь класс-валидатор)

- Сущность "персональных данных", паспорт перестал помещаться в интеджер. Потестируй ещё через ручку создания персонал даты, не создания студента

- StudentsService - добавление нового студента завернуть в транзакцию

- StudentsService - почитать в документации, почему на криейт репозитория не нужен эвэйт

- StudentsService - запрос всех студентов - квери параметры -> сортировка, поиск, пагинация (лимит, оффсет), разные фильтры.

- Сервис педагогов: научиться забирать только нужные поля из целевых таблиц (пароль отдавать не нужно)

- Всем ДТО класс-валидатор!

- Сущность студента, мэни-ту-мэни: разрешит добавить и без указания названия группы (как, и надо ли, исправить это поведение?), но если вбить несуществующую, то будет ругаться.

- dbConnectionConfig: synchronize: true, // TODO: уточнить по этой опции, в проде, вроде как, рекомендуется ее отключать

- Сделать одну из таблиц (или переделать имеющуюся) через ентитиСхему. Вроде поприятнее выглядит. Сделай педагогов обычным способом, убедись, что всё работает как надо, затем переделай их на ентитиСхему. Будет ли, кстати, она автоматически подтягиваться в массив сущностей апп или надо будет руками вбивать? Помни про этот момент, если что-то пойдёт не так.



-------------------------

Реализовать сущности:

Педагоги (teachers/lecturers) +-
Студенты +-
Дисциплины +-
Группы +-
Аудитории +-
Лекции +-
Расписание (лекции?)
Успеваемость (пока не знаю как лучше реализовать)

Лекция - начало, конец, день недели, аудитория, педагог, группа или группы, дисциплина

У сущности "лекция" должен быть составной первичный ключ - день недели + время начала + время окончания, которые втроем должны быть уникальны (по отдельности значения повторяться могут, но все 3 вместе должны быть в единственном экземпляре в таблице)
На этом этапе неплохо бы освежить теорию постгреса, чтобы не нафигарить.

Таблицу контактов можно сделать не 1 к 1, а миксином. Но лучше связью.
А вот ФИО и дату рождения у педагогов и студентов точно следует миксином сделать (да чото тоже не... не понравились). Но следует этот вопрос зафиксировать и получше его поизучать. Там ещё и вариант наследования есть... Мне пока связь 1-к-1 больше всего зашла.
Миксином:
@Column(() => PersonalData)
personalData: PersonalData;

Правильно настроить каскады (или не каскады) - при удалении, изменении и т.д.

Составление расписания в преподской админке - автоматически определяет занятых преподов, аудитории и группы на это время и день

Расписание, вероятно, это не сущность базы, а просто для удобства. А для базы это лекции, которые не могут пересекаться по дням и времени

Фронтенд часть можно сначала сделать на опшинс апи, затем в другой ветке переписать на композишн апи
Форму создания студентов сделать в несколько шагов - персональные данные; контакты; всё, что касается учёбы (группа, начало учёбы и тд). Группы подтягиваются в селект с сервера из имеющихся, уже заранее созданных

На фронтенде для ввода паспорта, телефона и почты использовать маски

OAuth 2.0

Тут индексы где-то имеет смысл прикрутить?.. Вообще не похоже - приложение никак не претендует на наличие огромных таблиц. А студенты - слишком частообновляемая.

Транзакции, агрегации

Совсем по-хорошему (лучше помодульно - пока в одном модуле всё это не реализовано, за другой не браться):
- наследование сервисов от интерфейсов
- класс-валидатор
- глобальные пайп, эксепшн фильтр...
- нест-конфиг
- сваггер
- малтер и загрузка фотографий в досье (персонал дата)
- шарп для обработки фотографий
- интерфейсы с джээсдоком

-------------------------

Моменты, которые нужно продумать/разобраться:
(наскрести из тудусов файлов, по поиску TODO)

А с нэймингом внутри модуля как правильнее - контакт или контактс? (контроллер, сервис, модуль). Сущность-то понятно, что в единственном числе.

Надо поузнавать, есть ли специальный тип для паспортов

Примеры транзакций

А как сделать, чтобы при моей реализации 1 контакт мог принадлежать только одному человеку? Не важно - студенту или преподавателю. Он будет уникален в таблице контактов, но его можно подсоединить к разным людям.



{
  "passport": 6622214521,
  "name": "Иван",
  "surname": "Иванов",
  "patronymic": "Иванович",
  "birthdate": "1995-10-03",
  "isMale": true,
  "phone": "+7-922-873-14-51",
  "email": "hello@mail.com",
  "country": "Индия",
  "city": "Индусск",
  "street": "Слоновая",
  "house": 1,
  "flat": 7,
  "receiptDate": "2019-09-01",
  "deductionDate": null,
  "groupName": "ВМК-19-3",
}